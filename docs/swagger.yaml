basePath: /v1
definitions:
  controller.requester:
    properties:
      name:
        type: string
      role:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
    required:
    - firstname
    - lastname
    type: object
  model.UserCreateRequest:
    properties:
      firstname:
        type: string
      lastname:
        type: string
    required:
    - firstname
    - lastname
    type: object
  model.UserUpdateRequest:
    properties:
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
    required:
    - firstname
    - lastname
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is example of RESTful api
  title: Swagger Example API
  version: "1.0"
paths:
  /user:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "304":
          description: Not Modified
          schema: {}
        "400":
          description: Bad Request
          schema: {}
      summary: Create user
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: update user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "409":
          description: Conflict
          schema: {}
      summary: Update user
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: userid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "409":
          description: Conflict
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      parameters:
      - description: userid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get user
      tags:
      - User
  /user/sign-up:
    post:
      consumes:
      - application/json
      parameters:
      - description: user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controller.requester'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: SignUp
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Auth for user repo
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
